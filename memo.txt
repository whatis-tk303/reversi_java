####################################################################################################
== 2018-02-27(火)

■ GUI関連の見直し
ヘンにループを回して、何かがおかしい。だからヘンにスレッドを使ったりしてる。
Javaだから（？）気軽にスレッドを使えるので、いつもと違うへんなことをしてる気がする。
なので、普通のGUIアプリを作る感覚で作って、それで同じように動くようにする感じでリファクタリングしてみる。
→ ブランチ：gui_refact

・まず、アプリケーションクラスを作る。Runnableを implementsして、このアプリケーションを Threadで動かす。
・盤面（JPanel）でマウスイベントを受けれるようにして、イベントが来たら 人間プレイヤーへ通知する
・ゲームマネージャーをスレッドにして、ゲームの最中はループを回す
→ いろいろ試行錯誤してたら、結局アプリケーションスレッド１つになった
	（このスレッドも不要かもしれないが、Applet のようにするためこのままにしておく


■ コンパイルの依存関係（とりあえずコンパイルエラーは回避）
依存があるなら、makefile にその依存関係を書けば良い
→ Player.class が Reversi.class より先に生成されるようにした


####################################################################################################
== 2018-02-25(日)

■ コンパイルの依存関係

Player.java を先にコンパイルしておかないと、ReversiBoard.java のコンパイル時に
HumanPlayerクラスが無いといって怒られる。
→ どうしたら良いのか？（Javaの場合の依存関係の解消の仕方がよくわからない）
	→ とりあえず HumanPlayerでメンバ変数の宣言をしてたのを、Playerで宣言するようにして、
		それを使用するところで HumanPlayer にキャストして使うようにしたらエラーがでなくなった。


■ とりあえず対戦可能なところまで動くものができた
人間 vs コンピュータ、人間 vs 人間 のプレイも可能になった。



####################################################################################################
== 2018-02-19(月)

■ ひっくり返せる場所の候補を調べる：getAvailablePos()
	・８ｘ８の盤面全部について調べる
	・隣に１つでも相手の駒がある
	・それぞれをリストアップして返す

■ ひっくり返せる場所のそれぞれについて調べる：getTurnPieces()
	・ひっくり返せる位置から8方向それぞれについて調べる
	・１つの方向について調べる
		・その方向が自分の駒にあたるまで調べる
		・何も置いてないところにあたるか、端まで行ったら終わり
		・自分の駒にあたるまでに、相手の駒があったらその位置をリストアップする
	・8方向全部についてリストアップして返す


