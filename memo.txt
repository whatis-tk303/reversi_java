

####################################################################################################
== 2018-03-01(木)

■ 駒の描画を PNGファイルでやるようにした

	駒のタイプを表す Enumにフィールドを持たせることができるので、駒のイメージのファイル名（*.png）と
	それから生成する ImageIconクラスを持つようにした。
	→ 駒の描画はアイコンを描画するだけで良くなった。


■ 駒をひっくり返すアニメーション処理（案）

	 /* TODO: 20180219  ここで駒をひっくり返す（アニメーションも実行する？）
	  *
	  *	＜アニメーション方法（案）＞
	  *  - 準備として、盤面上のひっくり返す駒すべてについて：
	  *    - 駒タイプを変更する（内部的にひっくり返す）
	  *    - アニメーション属性を設定する
	  *      （ Rate：0％、From：現在の駒タイプ、To：ひっくり返した後の駒タイプ ）
	  *
	  *  - アニメーションループ：
	  *    - 盤面上のひっくり返す駒すべてについて：
	  *      - アニメーション Rateをインクリメントする（+10％とか）
	  *      - 盤面を再描画する
	  *        - 駒の描画処理にて、アニメーション Rateに応じた描画をする
	  *          （Rateが 50％なら半分ひっくり返したような絵を描画する）
	  *        - 上記をアニメーション Rateが 100％になるまで繰り返す
	  */


	上記にて、まずはひっくり返すすべての駒が同時にひっくり返るアニメーションが実現できると思われる。
	→ それを実現するためには：
		・駒クラス（）にアニメーションRateや From、To などの属性を持たせたり、
		・アニメーションRateをインクリメントするメソッドを持たせたり、
		・アニメーションRateに応じた描画処理を実装したり（Rateに応じたイメージを描画する等）、
		・・・etc.

	それができたら、次は駒を時間的にずらして順番にひっくり返すようなアニメーションにする。
	→ アニメーションのインクリメント後の値が 100％になってたらアニメーション完了なので、
		すべての駒のアニメーションRateが 100％になるまで再描画を繰り返せばよい（だろう）


■ 駒を指す時のアニメーション処理（案）

	駒をひっくり返すアニメーション処理を応用したら、指すアニメーションもできそう？
	・アニメーション 0％の時  ： 駒の位置を盤面の一番下ぐらいにする
	・アニメーション 100％の時： 駒の位置を盤面上の指し位置にする
	→ Rateが 0％から 100％に進捗するに従って、駒の位置が盤面の下から
		指し位置に向かって移動するようなアニメーション描画になる（という想定）


####################################################################################################
== 2018-02-27(火)

■ GUI関連の見直し
ヘンにループを回して、何かがおかしい。だからヘンにスレッドを使ったりしてる。
Javaだから（？）気軽にスレッドを使えるので、いつもと違うへんなことをしてる気がする。
なので、普通のGUIアプリを作る感覚で作って、それで同じように動くようにする感じでリファクタリングしてみる。
→ ブランチ：gui_refact

・まず、アプリケーションクラスを作る。Runnableを implementsして、このアプリケーションを Threadで動かす。
・盤面（JPanel）でマウスイベントを受けれるようにして、イベントが来たら 人間プレイヤーへ通知する
・ゲームマネージャーをスレッドにして、ゲームの最中はループを回す
→ いろいろ試行錯誤してたら、結局アプリケーションスレッド１つになった
	（このスレッドも不要かもしれないが、Applet のようにするためこのままにしておく


■ コンパイルの依存関係（とりあえずコンパイルエラーは回避）
依存があるなら、makefile にその依存関係を書けば良い
→ Player.class が Reversi.class より先に生成されるようにした


####################################################################################################
== 2018-02-25(日)

■ コンパイルの依存関係

Player.java を先にコンパイルしておかないと、ReversiBoard.java のコンパイル時に
HumanPlayerクラスが無いといって怒られる。
→ どうしたら良いのか？（Javaの場合の依存関係の解消の仕方がよくわからない）
	→ とりあえず HumanPlayerでメンバ変数の宣言をしてたのを、Playerで宣言するようにして、
		それを使用するところで HumanPlayer にキャストして使うようにしたらエラーがでなくなった。


■ とりあえず対戦可能なところまで動くものができた
人間 vs コンピュータ、人間 vs 人間 のプレイも可能になった。



####################################################################################################
== 2018-02-19(月)

■ ひっくり返せる場所の候補を調べる：getAvailablePos()
	・８ｘ８の盤面全部について調べる
	・隣に１つでも相手の駒がある
	・それぞれをリストアップして返す

■ ひっくり返せる場所のそれぞれについて調べる：getTurnPieces()
	・ひっくり返せる位置から8方向それぞれについて調べる
	・１つの方向について調べる
		・その方向が自分の駒にあたるまで調べる
		・何も置いてないところにあたるか、端まで行ったら終わり
		・自分の駒にあたるまでに、相手の駒があったらその位置をリストアップする
	・8方向全部についてリストアップして返す


